datacvthread（数据收发的线程）
#include "datarcvthread.h"
#include <QDebug>

DataRcvThread::DataRcvThread()
{
}

void DataRcvThread::run()
{
    TcpSocket = new QTcpSocket(this);//TCP通信
    connect(TcpSocket, SIGNAL(readyRead()),//连接成功信号readyread,自动产生
            this, SLOT(readMessage()));
    TcpSocket->abort();//立即结束
    TcpSocket->connectToHost("192.168.1.10", 7);//连接服务端
    //QByteArray connnectsuccessfultxt = "(abc)\n";

    QByteArray array1;
    array1.resize(3);
    array1[0] = 0x01;
    array1[1] = 0x02;
    array1[2] = 0x01;

    //TcpSocket->write(array);
    //connnectsuccessfultxt.prepend(char(170));//在被选元素的开始插入内容
    //connnectsuccessfultxt.prepend(char(170));

    TcpSocket->write(array1);//将数据写入网口的发送缓存中，write发送数据给服务端
    Threaddata::instance()->connectFlag = true;//当连接成功可以将自定义的标记位置为true，连接成功
    exec();//附线程也进入事件循环的状态
}

void DataRcvThread::startRunning()
{
    Threaddata::instance()->Lock();// Threaddata::instance()访问唯一实例
    Threaddata::instance()->stopFlag = true;
    Threaddata::instance()->ori_ratio = Threaddata::instance()->now_ratio;
    Threaddata::instance()->lockpointFlag = false;
    Threaddata::instance()->Init_xs_ys(Threaddata::instance()->totPoint);
    Threaddata::instance()->Init_buffer(Threaddata::instance()->bufferPoint);
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));               
    //TcpSocket->write(requestDataTxt);
    QByteArray array1;
    //array1.resize(3);
    array1[0] = 0x01;
    array1[1] = 0x02;
    array1[2] = 0x01;
    array1[3] = 0x01;
    //array1[4] = 0x02;
    //array1[5] = 0x01;
    //array1[3] = 0x01;
    //array1[4] = 0x01;
    //array1[5] = 0x01;
    //array1[6] = 0x01;
    TcpSocket->write(array1);//开始运行
    TcpSocket->flush();
    Threaddata::instance()->Unlock();
}



//void DataRcvThread::SlotTimeDivChangeMessage(QByteArray *Mes)//时间分辨率改变槽
//{
//    TcpSocket->write(*Mes);
  //  TcpSocket->flush();
//
//}

void DataRcvThread::readMessage()//接收信息槽
{
    char recvtxt[1002];
    const int number = int(TcpSocket->read(recvtxt,1002));//read函数把网口的接收缓存中的数据全部读入到recvtxt中,计算接收到的数据量
    qDebug() <<recvtxt ;
    Threaddata::instance()->Lock();
    int pointNumber = Threaddata::instance()->totPoint;
    int bufpointNumber = Threaddata::instance()->bufferPoint;
    if (pointNumber < 100)
    {
        if (Threaddata::instance()->bufferFlag)
        {
            int i;
            if (number == bufpointNumber)
            {
                for (i = 0; i < bufpointNumber; i++)
                {
                    Threaddata::instance()->ybuffer1[i] = double(recvtxt[i] - 48);
                }
            }
        }
        else
        {
            int i;
            if (number == bufpointNumber)
            {
                for (i = 0; i < bufpointNumber; i++)
                {
                    Threaddata::instance()->ybuffer2[i] = double(recvtxt[i] - 48);
                }
            }
        }
        Threaddata::instance()->recvFlag = true;
    }
    else
    {
        if (Threaddata::instance()->bufferFlag)
        {
            Threaddata::instance()->bufferPointNumber = number;
            int i;
            if (number <= pointNumber)
            {
                for (i = 0; i < pointNumber; i++)
                {
                    Threaddata::instance()->ybuffer1[i] = double(recvtxt[i] - 48);
                }
            }
        }
        else
        {
            Threaddata::instance()->bufferPointNumber = number;
            int i;
            if (number <= pointNumber)
            {
                for (i = 0; i < pointNumber; i++)
                {
                    Threaddata::instance()->ybuffer2[i] = double(recvtxt[i] - 48);
                }
            }
        }
        Threaddata::instance()->recvFlag = true;
    }

    Threaddata::instance()->Unlock();
}

void DataRcvThread::sendRequestMessage()//请求数据请求
{
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));
    //requestDataTxt.prepend(char(0x00));
    QByteArray requestData;
    requestData[0] = 0x01;
    requestData[1] = 0x02;
    requestData[2] = 0x01;
    requestData[3] = 0x04;
    TcpSocket->write(requestData);

    TcpSocket->flush();//立即发送
}

//信号发生器将参数信息发送给下位机
void DataRcvThread::SlotSendSignalParameter(QByteArray *paraArray)
{
    TcpSocket->write(*paraArray);
    TcpSocket->flush();
}
//示波器将触发信息发送给下位机
void DataRcvThread::slotsetTrigger(QByteArray *paraArray)
{
    TcpSocket->write(*paraArray);
    TcpSocket->flush();
}
void DataRcvThread::Slotsetvdiv(QByteArray *paraArray)
{
    TcpSocket->write(*paraArray);
    TcpSocket->flush();
}

void DataRcvThread::SlotStopSignal()//停止发送信号
{
    Threaddata::instance()->Lock();
    Threaddata::instance()->stopFlag = false;
    //QByteArray txt = "(stop sending data stream!)\n";
    //txt.prepend(char(0x05));
    //txt.prepend(char(0x00));
    QByteArray StopSignal;
    StopSignal[0] = 0x01;
    StopSignal[1] = 0x02;
    StopSignal[2] = 0x01;
    StopSignal[3] = 0x02;
    //StopSignal[4] = 0x02;
    //StopSignal[5] = 0x01;
    TcpSocket->write(StopSignal);
    TcpSocket->flush();
    Threaddata::instance()->lockPointFunc();
    Threaddata::instance()->Unlock();
}



void DataRcvThread::Sslotrun()//请求数据请求
{
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));
    //requestDataTxt.prepend(char(0x00));
    QByteArray requestData;
    requestData[0] = 0x02;
    requestData[1] = 0x02;
    requestData[2] = 0x01;
    requestData[3] = 0x01;
    //requestData[4] = 0x00;
    //requestData[5] = 0x00;
    TcpSocket->write(requestData);
    TcpSocket->flush();//立即发送
}

void DataRcvThread::TSslotrun()//通道二请求数据请求
{
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));
    //requestDataTxt.prepend(char(0x00));
    QByteArray requestData;
    requestData[0] = 0x02;
    requestData[1] = 0x02;
    requestData[2] = 0x02;
    requestData[3] = 0x01;
    //requestData[4] = 0x00;
    //requestData[5] = 0x00;
    TcpSocket->write(requestData);
    TcpSocket->flush();//立即发送
}

void DataRcvThread::Sslotstop()//停止数据请求
{
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));
    //requestDataTxt.prepend(char(0x00));
    QByteArray requestData;
    requestData[0] = 0x02;
    requestData[1] = 0x02;
    requestData[2] = 0x01;
    requestData[3] = 0x02;
    //requestData[4] = 0x00;
    //requestData[5] = 0x00;
    TcpSocket->write(requestData);
    TcpSocket->flush();//立即发送
}

void DataRcvThread::TSslotstop()//通道二停止数据请求
{
    //QByteArray requestDataTxt = "(please send data!)\n";
    //requestDataTxt.prepend(char(0x04));
    //requestDataTxt.prepend(char(0x00));
    QByteArray requestData;
    requestData[0] = 0x02;
    requestData[1] = 0x02;
    requestData[2] = 0x02;
    requestData[3] = 0x02;
    //requestData[4] = 0x00;
    //requestData[5] = 0x00;
    TcpSocket->write(requestData);
    TcpSocket->flush();//立即发送
}

signalwidget（信号发生器的界面与参数传输）
#include "signalwidget.h"
#include <QGridLayout>
#include <QDebug>

SignalWidget::SignalWidget(QWidget *parent):
    QWidget(parent)
{
    Waveformindex = 0;
    Waveformindexs = 0;
    int i;
    QPointF var;//在浮点精度上表征平面上的点
    for (i=0;i<700;i++)
    {
        var.setX(i);//更改X和Y
        var.setY(-150*sin(0.009*i));
        sin_table.append(var);//提前写入三种波形
        if ((i!=0)&&(i<335))
        {
            var.setY(-150);
        }
        else
        {
            if (i>365)
            {
                var.setY(150);
            }
            else
            {
                var.setY(10*i-3500);
            }
        }
        square_table.append(var);
        if (i<175)
        {
            var.setY(-150.0/175*i);
        }
        else
        {
            if (i<525)
            {
                var.setY(150.0/175*i-300);
            }
            else
            {
                var.setY(600-150.0/175*i);
            }
        }
        trangle_table.append(var);
        var.setY(0);
        any_table.append(var);
    }
    map = new QPixmap(700,400);
    maplab  = new QLabel();
    maplab->setPixmap(*map);

    maps = new QPixmap(700,400);
    maplabs  = new QLabel();
    maplabs->setPixmap(*maps);

    parlab = new QLabel("Parameter Transmission");
    parlab->setFixedSize(200,20);
    parlab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(14 , 150 , 254);border-radius:5px;min-height: 2px;max-height:23px;padding-left:5px;}");

    channelonelab = new QLabel("Channel 1");
    channelonelab->setFixedSize(200,20);
    channelonelab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:5px;}");
    channeltwolab = new QLabel("Channel 2");
    channeltwolab->setFixedSize(200,20);
    channeltwolab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:5px;}");

    waveformLab = new QLabel("波形Waveform"); 
    waveformLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;}");
    outputlab = new QLabel("输出");
    outputlab->setFixedSize(50,20);
    outputlab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 250);border-radius:5px;min-height: 2px;max-height:23px;padding-left:5px;}");
    stoplab = new QLabel("中止");
    stoplab->setFixedSize(50,20);
    stoplab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 250);border-radius:5px;min-height: 2px;max-height:23px;padding-left:5px;}");

    amplitudeLab = new QLabel("峰峰值Vpp");
    amplitudeLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:15px;}");
    frequencyLab = new QLabel("频率Fre");
    frequencyLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:25px;}");
    dcLab = new QLabel("直流偏移Voffset");
    dcLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;}");
    anywaveformLab = new QLabel("任意点波形");
    anywaveformLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:10px;}");

    waveformLabs = new QLabel("波形Waveform");
    waveformLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;}");
    amplitudeLabs = new QLabel("峰峰值Vpp");
    amplitudeLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:15px;}");
    frequencyLabs = new QLabel("频率Fre");
    frequencyLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:25px;}");
    dcLabs = new QLabel("直流偏移Voffset");
    dcLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;}");
    anywaveformLabs = new QLabel("任意点波形");
    anywaveformLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:10px;}");

    waveformCmb = new QComboBox();
    waveformCmb->setStyleSheet("QComboBox{background-color:white;}");
    waveformCmb->insertItem(0,"正弦波");
    waveformCmb->insertItem(1,"方波");
    waveformCmb->insertItem(2,"三角波");
    waveformCmb->insertItem(3,"任意波形");
    connect(waveformCmb,SIGNAL(currentIndexChanged(int)),
            this,SLOT(SlotWaveformChange(int)));//示意波形改变槽

    waveformCmbs = new QComboBox();
    waveformCmbs->setStyleSheet("QComboBox{background-color:white;}");
    waveformCmbs->insertItem(0,"正弦波");
    waveformCmbs->insertItem(1,"方波");
    waveformCmbs->insertItem(2,"三角波");
    waveformCmbs->insertItem(3,"任意波形");
    connect(waveformCmbs,SIGNAL(currentIndexChanged(int)),
            this,SLOT(SlotWaveformChanges(int)));//示意波形改变槽

    amplitudeLET = new QSpinBox();//单行文本编辑控件
    amplitudeLET->setStyleSheet("QSpinBox{background-color:white;}");
    amplitudeLET ->setMinimum(500);
    amplitudeLET ->setMaximum(5000);
    amplitudeLET ->setValue(500);//设定初始值为500
    amplitudeLET ->setSingleStep(50);
    connect(amplitudeLET, SIGNAL(valueChanged(int)),this, SLOT(Slotscopelimit()));
    frequencyLET = new QSpinBox();
    frequencyLET->setStyleSheet("QSpinBox{background-color:white;}");
    frequencyLET ->setMinimum(0);
    frequencyLET ->setMaximum(5000000);
    dcLET = new QSpinBox();
    dcLET->setStyleSheet("QSpinBox{background-color:white;}");
    anyWaveform = new QTextEdit();//多行文本编辑控件
    anyWaveform->setStyleSheet("QTextEdit{background-color:white;}");
    //amplitudeUnit = new QLabel("V");

    amplitudeLETs = new QSpinBox();//单行文本编辑控件
    amplitudeLETs->setStyleSheet("QSpinBox{background-color:white;}");
    amplitudeLETs ->setMinimum(500);
    amplitudeLETs ->setMaximum(5000);
    amplitudeLETs ->setValue(500);
    amplitudeLETs ->setSingleStep(50);
    connect(amplitudeLETs, SIGNAL(valueChanged(int)),this, SLOT(Slotscopelimits()));
    frequencyLETs = new QSpinBox();
    frequencyLETs->setStyleSheet("QSpinBox{background-color:white;}");
    frequencyLETs ->setMinimum(0);
    frequencyLETs ->setMaximum(5000000);
    dcLETs = new QSpinBox();
    dcLETs->setStyleSheet("QSpinBox{background-color:white;}");
    anyWaveforms = new QTextEdit();
    anyWaveforms->setStyleSheet("QTextEdit{background-color:white;}");

    amplitudeUnit = new QComboBox();
    amplitudeUnit->setStyleSheet("QComboBox{background-color:white;}");
    amplitudeUnit->insertItem(0,"mV");
    amplitudeUnit->insertItem(1,"V");
    connect(amplitudeUnit, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotampunitchange()));
    //connect(amplitudeUnit, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotscopelimit()));

    amplitudeUnits = new QComboBox();
    amplitudeUnits->setStyleSheet("QComboBox{background-color:white;}");
    amplitudeUnits->insertItem(0,"mV");
    amplitudeUnits->insertItem(1,"V");
    connect(amplitudeUnits, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotampunitchanges()));

    //frequencyUnit = new QLabel("Hz");
    frequencyUnit = new QComboBox();
    frequencyUnit->setStyleSheet("QComboBox{background-color:white;}");
    frequencyUnit->insertItem(0,"Hz");
    frequencyUnit->insertItem(1,"KHz");
    frequencyUnit->insertItem(2,"MHz");
    connect(frequencyUnit, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotfreunitchange()));

    frequencyUnits = new QComboBox();
    frequencyUnits->setStyleSheet("QComboBox{background-color:white;}");
    frequencyUnits->insertItem(0,"Hz");
    frequencyUnits->insertItem(1,"KHz");
    frequencyUnits->insertItem(2,"MHz");
    connect(frequencyUnits, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotfreunitchanges()));

    //waveformCmb->insertItem(3,"任意波形");
    //dcUnit = new QLabel("V");
    dcUnit = new QComboBox();
    dcUnit->setStyleSheet("QComboBox{background-color:white;}");
    dcUnit->insertItem(0,"mV");
    dcUnit->insertItem(1,"V");
    dcLET ->setMinimum(-3750);
    dcLET ->setMaximum(3750);
    connect(dcUnit, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotdcunitchange()));
    anyWaveformUnit = new QLabel("V");
    anyWaveformUnit->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:17px;}");
//s为通道二
    dcUnits = new QComboBox();
    dcUnits->setStyleSheet("QComboBox{background-color:white;}");
    dcUnits->insertItem(0,"mV");
    dcUnits->insertItem(1,"V");
    dcLETs ->setMinimum(-3750);
    dcLETs ->setMaximum(3750);
    connect(dcUnits, SIGNAL(currentIndexChanged(int)),this, SLOT(Slotdcunitchanges()));
    anyWaveformUnits = new QLabel("V");
    anyWaveformUnits->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:17px;}");

    sendoneBtn = new QPushButton("CH1");
    sendoneBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:black;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px;}QPushButton:pressed{background-color: rgba(44, 137, 255); border:2px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px;}");
    //sendoneBtn->setStyleSheet("background: rgb(0,255,0)");
    sendtwoBtn = new QPushButton("CH2");
    sendtwoBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:black;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px}QPushButton:pressed{background-color: rgba(44, 137, 255); border:2px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px}");
    dutyCycleLab = new QLabel("占空比");
    dutyCycleLab->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:25px;}");
    dutyCycleLET = new QDoubleSpinBox();
    dutyCycleLET->setStyleSheet("QDoubleSpinBox{background-color:white;}");
    dutyCycleLET ->setMinimum(0);
    dutyCycleLET ->setMaximum(100);
    dutyunit = new QLabel("%");
    dutyunit->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:yellow;border-radius:5px;min-height: 2px;max-height:23px;padding-left:17px;}");

    dutyCycleLabs = new QLabel("占空比");
    dutyCycleLabs->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:25px;}");
    dutyCycleLETs = new QDoubleSpinBox();
    dutyCycleLETs->setStyleSheet("QDoubleSpinBox{background-color:white;}");
    dutyCycleLETs ->setMinimum(0);
    dutyCycleLETs ->setMaximum(100);
    dutyunits = new QLabel("%");
    dutyunits->setStyleSheet("QLabel{font-family:Microsoft Yahei;color:black;background-color:rgb(90 , 200 , 200);border-radius:5px;min-height: 2px;max-height:23px;padding-left:3px;padding-left:17px;}");
    connect(sendoneBtn,SIGNAL(clicked()),this,SLOT(getWaveformMessage()));

    connect(sendtwoBtn,SIGNAL(clicked()),this,SLOT(TgetWaveformMessage()));

    QGridLayout *layout = new QGridLayout(this);
    layout->setSizeConstraint(QLayout::SetFixedSize);
    layout->addWidget(channelonelab,0,0,1,1);
    layout->addWidget(channeltwolab,6,0,1,1);
    layout->addWidget(parlab,0,5,1,1);
    layout->addWidget(waveformLab,0,1,1,1);
    layout->addWidget(waveformLabs,6,1,1,1);
    layout->addWidget(waveformCmb,0,2,1,1);
    layout->addWidget(waveformCmbs,6,2,1,1);
    layout->addWidget(maplab,0,4,6,1);
    layout->addWidget(maplabs,6,4,6,1);
    layout->addWidget(amplitudeLab,1,1,1,1);

    layout->addWidget(amplitudeLabs,7,1,1,1);


    layout->addWidget(amplitudeLET,1,2,1,1);
    layout->addWidget(amplitudeUnit,1,3,1,1);

    layout->addWidget(amplitudeLETs,7,2,1,1);
    layout->addWidget(amplitudeUnits,7,3,1,1);

    layout->addWidget(frequencyLab,2,1,1,1);
    layout->addWidget(frequencyLET,2,2,1,1);
    layout->addWidget(frequencyUnit,2,3,1,1);

    layout->addWidget(frequencyLabs,8,1,1,1);
    layout->addWidget(frequencyLETs,8,2,1,1);
    layout->addWidget(frequencyUnits,8,3,1,1);

    layout->addWidget(dcLab,3,1,1,1);
    layout->addWidget(dcLET,3,2,1,1);
    layout->addWidget(dcUnit,3,3,1,1);

    layout->addWidget(dcLabs,9,1,1,1);
    layout->addWidget(dcLETs,9,2,1,1);
    layout->addWidget(dcUnits,9,3,1,1);

    layout->addWidget(dutyCycleLab, 4, 1,1,1);
    layout->addWidget(dutyCycleLET, 4, 2,1,1);
    layout->addWidget(dutyunit, 4, 3,1,1);

    layout->addWidget(dutyCycleLabs, 10, 1,1,1);
    layout->addWidget(dutyCycleLETs, 10, 2,1,1);
    layout->addWidget(dutyunits, 10, 3,1,1);

    layout->addWidget(anywaveformLab,5,1,1,1);
    layout->addWidget(anyWaveform,5,2,1,1);
    layout->addWidget(anyWaveformUnit,5,3,1,1);

    layout->addWidget(anywaveformLabs,11,1,1,1);
    layout->addWidget(anyWaveforms,11,2,1,1);
    layout->addWidget(anyWaveformUnits,11,3,1,1);

    layout->addWidget(outputlab,10,5,1,1);
    layout->addWidget(stoplab,11,5,1,1);


    StopBtn = new QPushButton("X");//标准按钮
    StopBtn->setFixedSize(50,50);
    StopBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:red;background-color:rgb(255,255,255);border-radius:25px;border:2px solid black;}QPushButton:pressed{background-color: rgba(173, 202, 232); border:4px solid black;border-radius:25px;padding-left:6px;padding-top:4px;}");
    //StopBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:red;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px}QPushButton:pressed{background-color: rgba(44, 137, 255); border:2px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px}");
    RunBtn = new QPushButton("CH1");
    RunBtn->setFixedSize(50,50);
    RunBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:green;background-color:rgb(255,255,255);border-radius:25px;border:2px solid black;}QPushButton:pressed{background-color: rgba(173, 202, 232); border:4px solid black;border-radius:25px;padding-left:6px;padding-top:4px;}");

    //RunBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:red;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px}QPushButton:pressed{background-color: rgba(44, 137, 255); border:2px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px}");
    connect(RunBtn,SIGNAL(clicked()),this,SIGNAL(SRunSignal()));
    connect(StopBtn,SIGNAL(clicked()),this,SIGNAL(SStopSignal()));
    //通道一
    StoptwoBtn = new QPushButton("X");//标准按钮
    StoptwoBtn->setFixedSize(50,50);
    StoptwoBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:RED;background-color:rgb(255,255,255);border-radius:25px;border:2px solid black;}QPushButton:pressed{background-color: rgba(173, 202, 232); border:4px solid black;border-radius:25px;padding-left:6px;padding-top:4px;}");

    //StoptwoBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:red;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px}QPushButton:pressed{background-color: rgba(44, 137, 255); border:4px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px}");
    RuntwoBtn = new QPushButton("CH2");
    RuntwoBtn->setFixedSize(50,50);
    RuntwoBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:green;background-color:rgb(255,255,255);border-radius:25px;border:2px solid black;}QPushButton:pressed{background-color: rgba(173, 202, 232); border:4px solid black;border-radius:25px;padding-left:6px;padding-top:4px;}");

    //RuntwoBtn->setStyleSheet("QPushButton{font-family:Microsoft Yahei;color:red;background-color:rgb(14 , 150 , 254);border-radius:5px;max-width:100px}QPushButton:pressed{background-color: rgba(44, 137, 255); border:4px solid white;border-radius:10px;padding-left:6px;padding-top:4px;max-width:100px}");
    connect(RuntwoBtn,SIGNAL(clicked()),this,SIGNAL(TSRunSignal()));
    connect(StoptwoBtn,SIGNAL(clicked()),this,SIGNAL(TSStopSignal()));
    //通道二

    layout->addWidget(StoptwoBtn,11,7,1,1);
    layout->setMargin(10);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);
    layout->addWidget(RuntwoBtn,10,7,1,1);
    layout->setMargin(50);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);

    layout->addWidget(StopBtn,11,6,1,1);
    layout->setMargin(50);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);
    layout->addWidget(RunBtn,10,6,1,1);
    layout->setMargin(50);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);

    layout->addWidget(sendoneBtn,0,6,1,1);
    layout->setMargin(50);
    //layout->LayoutBottomMargin(10);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);

    layout->addWidget(sendtwoBtn,0,7,1,1);
    layout->setMargin(50);
    layout->setHorizontalSpacing(20);
    layout->setVerticalSpacing(20);
    //layout->setColumnStretch(1,2);
}

void SignalWidget::getWaveformMessage()
{
    int index = this->waveformCmb->currentIndex();
    int Funit = this->frequencyUnit->currentIndex();
    int Aunit = this->amplitudeUnit->currentIndex();
    int Dunit = this->dcUnit->currentIndex();
    QString amplitudeTxt = this->amplitudeLET->text();
    QString frequecyTxt = this->frequencyLET->text();
    QString dcTxt = this->dcLET->text();
    QString duTxt = this->dutyCycleLET->text();
    //QString duTxts = duTxt*100;
    bool ok1;
    bool ok2;
    bool ok3;
    bool ok4;
    //QByteArray patatxt = "(the signal generator parameter is XXX)\n";
    QByteArray patatxt;
    patatxt[0]=0x02;
    patatxt[1]=0x01;
    patatxt[2]=0x01;
    patatxt[3]=0x01;

    patatxt[7]=Aunit;
    patatxt[12]=Funit;
    patatxt[15]=Dunit;
    patatxt[16]=0x00;
    patatxt[17]=0x00;


    //patatxt.prepend(char(0x01));
    if (index !=3)
    {
        int amp = amplitudeTxt.toFloat(&ok1);
        int fre = frequecyTxt.toFloat(&ok2);
        int dc = dcTxt.toFloat(&ok3);
        long double du = duTxt.toDouble(&ok4);
        int dus = du*100;
        int duh = dus/100;
        float dul = dus%100 ;
        if (index == 0)
        {
            patatxt[4]=0x03;
        }
        if (index == 1)
        {
            patatxt[4]=0x04;
            patatxt[16]=duh;
            patatxt[17]=dul;

        }
        if (index == 2)
        {
            patatxt[4]=0x05;
        }

        if (ok1&&ok2&&ok2)
        {
            qDebug() << index;
            qDebug() << "幅度:" << ' ' << amp;
            qDebug() << "频率:" << ' ' << fre ;
            qDebug() << "直流偏移" << ' ' << dc;
            qDebug() << "占空比" << ' ' << dus;
            patatxt[5]=amp;
            patatxt[6]=amp>>8;
            patatxt[8]=fre;
            patatxt[9]=fre>>8;
            patatxt[10]=fre>>16;
            patatxt[11]=fre>>24;
            patatxt[13]=dc;
            patatxt[14]=dc>>8;
            emit sendSignalParameter(&patatxt);//发出信号
        }
    }
    else
    {
        int fre = frequecyTxt.toFloat(&ok2);
        QString any = this->anyWaveform->toPlainText();
        QStringList list;
        list = any.split(QRegExp("\n"));
        float data[10];
        int number = list.count();
        int i;
        if ((ok2)&&(number == 10))
        {
            for (i = 0; i < 10; i++)
            {
                data[i] = list[i].toFloat();
                patatxt[13+i]=data[i];
            }
        }
        patatxt[4]=0x06;
        patatxt[5]=0x01;
        patatxt[6]=0x01;
        patatxt[8]=fre;
        patatxt[9]=fre>>8;
        patatxt[10]=fre>>16;
        patatxt[11]=fre>>24;
        qDebug()<<index;
        qDebug()<<"频率:"<< ' ' << fre;
        for (i = 0; i < 10; i++)
        {
            qDebug()<<data[i]<<' ';
            //patatxt[6+i]=data[i];
        }
        emit sendSignalParameter(&patatxt);

    }
}

void SignalWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(map);//创建Qpainter对象
    map->fill(Qt::black);
    painter.setPen(Qt::yellow);
    QFont font1("楷体",10,QFont::Bold,true);
    font1.setCapitalization(QFont::Capitalize);
    font1.setLetterSpacing(QFont::AbsoluteSpacing,2);
    //font1.setUnderline(true);
    //font1.setOverline(true);
    painter.setFont(font1);
    //painter.setPen(Qt::yellow);
    painter.drawText(20,25,tr("channel 1                波形示意"));
    painter.setPen(Qt::yellow);
    painter.translate(0,200);//坐标系平移到此位置
    //map->fill(Qt::white);//填充黑色
    switch(Waveformindex)
    {
    case 0:
        painter.drawLines(sin_table);//绘制直线
        break;
    case 1:
        painter.drawLines(square_table);
        break;
    case 2:
        painter.drawLines(trangle_table);
        break;
    case 3:
        painter.drawLines(any_table);
        break;
    }

    maplab->setPixmap(*map);
    QPainter painters(maps);//创建Qpainter对象
    painters.setPen(Qt::green);
    maps->fill(Qt::black);
    //painters.setPen(Qt::yellow);
    //QFont font2("宋体",10,QFont::Bold,true);
    //font2.setCapitalization(QFont::Capitalize);
    //font2.setLetterSpacing(QFont::AbsoluteSpacing,2);
    painters.setFont(font1);
    painters.setPen(Qt::green);
    painters.drawText(20,25,tr("channel 2               波形示意"));
    painters.translate(0,200);//坐标系平移到此位置
    //maps->fill(Qt::black);//填充黑色
    switch(Waveformindexs)
    {
    case 0:
        painters.drawLines(sin_table);//绘制直线
        break;
    case 1:
        painters.drawLines(square_table);
        break;
    case 2:
        painters.drawLines(trangle_table);
        break;
    case 3:
        painters.drawLines(any_table);
        break;
    }

    maplabs->setPixmap(*maps);
}



void SignalWidget::TgetWaveformMessage()
{
    int index = this->waveformCmbs->currentIndex();
    int Funit = this->frequencyUnits->currentIndex();
    int Aunit = this->amplitudeUnits->currentIndex();
    int Dunit = this->dcUnits->currentIndex();
    QString amplitudeTxt = this->amplitudeLETs->text();
    QString frequecyTxt = this->frequencyLETs->text();
    QString dcTxt = this->dcLETs->text();
    QString duTxt = this->dutyCycleLETs->text();
    bool ok1;
    bool ok2;
    bool ok3;
    bool ok4;
    //QByteArray patatxt = "(the signal generator parameter is XXX)\n";
    QByteArray patatxt;
    patatxt[0]=0x02;
    patatxt[1]=0x01;
    patatxt[2]=0x02;
    patatxt[3]=0x01;

    patatxt[7]=Aunit;
    patatxt[12]=Funit;
    patatxt[15]=Dunit;
    patatxt[16]=0x00;


    //patatxt.prepend(char(0x01));
    if (index !=3)
    {
        int amp = amplitudeTxt.toFloat(&ok1);
        int fre = frequecyTxt.toFloat(&ok2);
        int dc = dcTxt.toFloat(&ok3);
        long double du = duTxt.toDouble(&ok4);
        int dus = du*100;
        int duh = dus/100;
        float dul = dus%100 ;
        if (index == 0)
        {
            patatxt[4]=0x03;
        }
        if (index == 1)
        {
            patatxt[4]=0x04;
            patatxt[16]=duh;
            patatxt[17]=dul;
        }
        if (index == 2)
        {
            patatxt[4]=0x05;
        }

        if (ok1&&ok2&&ok2)
        {
            qDebug() << index;
            qDebug() << "幅度:" << ' ' << amp;
            qDebug() << "频率:" << ' ' << fre ;
            qDebug() << "直流偏移" << ' ' << dc;
            patatxt[5]=amp;
            patatxt[6]=amp>>8;
            patatxt[8]=fre;
            patatxt[9]=fre>>8;
            patatxt[10]=fre>>16;
            patatxt[11]=fre>>24;
            patatxt[13]=dc;
            patatxt[14]=dc>>8;
            emit sendSignalParameter(&patatxt);//发出信号
        }
    }
    else
    {
        int fre = frequecyTxt.toFloat(&ok2);
        QString any = this->anyWaveforms->toPlainText();
        QStringList list;
        list = any.split(QRegExp("\n"));
        float data[10];
        int number = list.count();
        int i;
        if ((ok2)&&(number == 10))
        {
            for (i = 0; i < 10; i++)
            {
                data[i] = list[i].toFloat();
                patatxt[13+i]=data[i];
            }
        }
        patatxt[4]=0x06;
        patatxt[5]=0x01;
        patatxt[6]=0x01;
        patatxt[8]=fre;
        patatxt[9]=fre>>8;
        patatxt[10]=fre>>16;
        patatxt[11]=fre>>24;
        qDebug()<<index;
        qDebug()<<"频率:"<< ' ' << fre;
        for (i = 0; i < 10; i++)
        {
            qDebug()<<data[i]<<' ';
            //patatxt[6+i]=data[i];
        }
        emit sendSignalParameter(&patatxt);

    }
}

void SignalWidget::SlotWaveformChange(int index)
{
    Waveformindex = index;
    update();
}

void SignalWidget::SlotWaveformChanges(int index)
{
    Waveformindexs = index;
    update();
}

void SignalWidget::Slotampunitchange()
{
    int indexa = this->amplitudeUnit->currentIndex();
    if(indexa==1)
    {
        amplitudeLET ->setMinimum(0);
        amplitudeLET ->setMaximum(5);
        amplitudeLET ->setSingleStep(1);
    }
    else if(indexa==0)
    {
        amplitudeLET ->setMinimum(500);
        amplitudeLET ->setMaximum(5000);
        amplitudeLET ->setSingleStep(50);
    }
}

void SignalWidget::Slotfreunitchange()
{
    int indexf = this->frequencyUnit->currentIndex();
    if(indexf==2)
    {
        frequencyLET ->setMinimum(0);
        frequencyLET ->setMaximum(5);
    }
    if(indexf==1)
    {
        frequencyLET ->setMinimum(0);
        frequencyLET ->setMaximum(5000);
    }
    if(indexf==0)
    {
        frequencyLET ->setMinimum(0);
        frequencyLET ->setMaximum(5000000);
    }
}

void SignalWidget::Slotdcunitchange()
{
    int indexd = this->dcUnit->currentIndex();
    if(indexd==1)
    {
        dcLET ->setMinimum(-3);
        dcLET ->setMaximum(3);
    }
    else if(indexd==0)
    {
        dcLET ->setMinimum(-3750);
        dcLET ->setMaximum(3750);
    }
}

void SignalWidget::Slotampunitchanges()
{
    int indexas = this->amplitudeUnits->currentIndex();
    if(indexas==1)
    {
        amplitudeLETs ->setMinimum(0);
        amplitudeLETs ->setMaximum(5);
        amplitudeLETs ->setSingleStep(1);
    }
    else if(indexas==0)
    {
        amplitudeLETs ->setMinimum(500);
        amplitudeLETs ->setMaximum(5000);
        amplitudeLETs ->setSingleStep(50);
    }
}

void SignalWidget::Slotfreunitchanges()
{
    int indexfs = this->frequencyUnits->currentIndex();
    if(indexfs==2)
    {
        frequencyLETs ->setMinimum(0);
        frequencyLETs ->setMaximum(5);
    }
    if(indexfs==1)
    {
        frequencyLETs ->setMinimum(0);
        frequencyLETs ->setMaximum(5000);
    }
    if(indexfs==0)
    {
        frequencyLETs ->setMinimum(0);
        frequencyLETs ->setMaximum(5000000);
    }
}

void SignalWidget::Slotdcunitchanges()
{
    int indexds = this->dcUnits->currentIndex();
    if(indexds==1)
    {
        dcLETs ->setMinimum(-3);
        dcLETs ->setMaximum(3);
    }
    else if(indexds==0)
    {
        dcLETs ->setMinimum(-3750);
        dcLETs ->setMaximum(3750);
    }
}
void SignalWidget::Slotscopelimit()
{
    int scope = this->amplitudeLET->value();
    int scale = scope/50;
    int remi = scope%50;
    int danwei = this->amplitudeUnit->currentIndex();
    if (danwei == 0)
    {
        if(remi >= 25)
        {
            amplitudeLET ->setValue(50*(scale+1));
            //amplitudeLET ->setMaximum(50*(scale+1));
        }
        else
        {
            amplitudeLET ->setValue(50*scale);
            //amplitudeLET ->setMaximum(50*scale);
        }
    }

}
void SignalWidget::Slotscopelimits()
{
    int scopes = this->amplitudeLETs->value();
    int scales = scopes/50;
    int remis = scopes%50;
    int danweis = this->amplitudeUnits->currentIndex();
    if (danweis == 0)
    {
        if(remis >= 25)
        {
            amplitudeLETs ->setValue(50*(scales+1));
            //amplitudeLET ->setMaximum(50*(scale+1));
        }
        else
        {
            amplitudeLETs ->setValue(50*scales);
            //amplitudeLET ->setMaximum(50*scale);
        }
    }

}
